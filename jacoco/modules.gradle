apply plugin:
        'jacoco'
        'org.jetbrains.kotlin.jvm'

jacoco {
    toolVersion ='0.8.7'
    version = '1.5.10'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

project.afterEvaluate {

    (android.hasProperty('applicationVariants') ? android.'applicationVariants' : android.'libraryVariants')
            .all { variant ->
                def variantName = variant.name
                def capVariantName = variantName.capitalize()
                def buildTypeName = variant.buildType.name
                def testTaskName = "test${capVariantName}UnitTest"
                tasks.create(name: "test${capVariantName}UnitTestCoverage", type: JacocoReport, dependsOn: [testTaskName,'createDebugCoverageReport']) {
                    group = "Reporting"
                    description = "Generate Jacoco coverage reports for the ${variantName} build."

                    reports {
                        xml.required = true
                        csv.required = true
                        //html.outputLocation.set(layout.buildDirectory.dir("jacocoHtml"))
                        //html.destination = file(getBuildDir().toString() + File.separator.toString() + "jacoco" + File.separator.toString() + "html")
                        html {
                            outputLocation = file("${buildDir}/coverage-report")
                        }
                    }

                    def excludes = [
                            // data binding
                            'android/databinding/**/*.class',
                            '**/android/databinding/*Binding.class',
                            '**/android/databinding/*',
                            '**/androidx/databinding/*',
                            '**/databinding/**',
                            '**/app/databinding/**',
                            '**/BR.*',
                            '**/*BindingAdapter*.*',
                            '**/DataBinding*.class',
                            // android
                            '**/R.class',
                            '**/R$*.class',
                            '**/BuildConfig.*',
                            '**/Manifest*.*',
                            '**/*Test*.*',
                            'android/**/*.*',
                            // kotlin
                            '**/*MapperImpl*.*',
                            '**/*$ViewInjector*.*',
                            '**/*$ViewBinder*.*',
                            '**/BuildConfig.*',
                            '**/*Component*.*',
                            '**/*BR*.*',
                            '**/Manifest*.*',
                            '**/*$Lambda$*.*',
                            '**/*Companion*.*',
                            '**/*Module*.*',
                            '**/*Dagger*.*',
                            // use it for now for future updates
                            '**/*Hilt*.*',
                            '**/di/**',
                            '**/*MembersInjector*.*',
                            '**/*_MembersInjector.class',
                            '**/*_Factory*.*',
                            '**/*_Provide*Factory*.*',
                            '**/*Extensions*.*',
                            '**/*BulletTextMarginSpan*.*',
                            '**/*LiTagHandler*.*',
                            // sealed and data classes
                            '**/*$Result.*',
                            '**/*$Result$*.*',
                            // adapters generated by moshi
                            '**/*JsonAdapter.*',
                            // extras
                            '**/generated/**',
                            // TEMP: Filter some classes that can not be cover by unit test
                            '**/*Activity*.*',
                            '**/*Fragment*.*',
                            '**/*Button*.*',
                            '**/*ViewAdapter*.*',
                            '**/*ViewHolder*.*',
                            '**/*Dialog*.*',
                            '**/*BottomSheet*.*',
                            '**/*EditText*.*',
                            '**/*SpannableText*.*'
                    ]

                    def jClasses = "${project.buildDir}/intermediates/javac/${variantName}/classes"
                    def kClasses = "${project.buildDir}/tmp/kotlin-classes/${variantName}"
                    def javaClasses = fileTree(dir: jClasses, excludes: excludes)
                    def kotlinClasses = fileTree(dir: kClasses, excludes: excludes)

                    classDirectories.from = files([javaClasses, kotlinClasses])

                    def sourceDirs = ["src/main/java",
                                      "src/$variantName/java",
                                      "src/$buildTypeName/java"]

                    sourceDirectories.from = files(sourceDirs)

//                    executionData.from = fileTree(dir: project.buildDir, includes: [
//
//                            'jacoco/*.exec',
//                            'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'
//                    ])

                    executionData.from = files(["${project.buildDir}/jacoco/${testTaskName}.exec"])
                }
            }

    tasks.register('coverAllVariants') {
        dependsOn(provider {
            tasks.findAll { task -> task.name.endsWith('Coverage') }
        })
    }
}